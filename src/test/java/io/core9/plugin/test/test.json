{
	"apiVersion":"1.0.1",
	"swaggerVersion":"1.2",
	"basePath":"http://localhost:8080/api",
	"resourcePath":"/pet",
	"produces":[
		"application/json"
	],
	"apis":[
		{
			"path":"/pet/{petId}",
			"operations":[
				{
					"method":"GET",
					"summary":"Find pet by ID",
					"notes":"Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions",
					"type":"Pet",
					"nickname":"getPetById",
					"authorizations":{
						
					},
					"parameters":[
						{
							"name":"petId",
							"description":"ID of pet that needs to be fetched",
							"required":true,
							"type":"string",
							"paramType":"path",
							"allowMultiple":false,
							"minimum":"1.0",
							"maximum":"5.0"
						}
					],
					"responseMessages":[
						{
							"code":400,
							"message":"Invalid ID supplied"
						},
						{
							"code":404,
							"message":"Pet not found"
						}
					]
				}
			]
		},
		{
			"path":"/pet",
			"operations":[
				{
					"method":"POST",
					"summary":"Add a new pet to the store",
					"notes":"",
					"type":"void",
					"nickname":"addPet",
					"authorizations":{
						
					},
					"parameters":[
						{
							"name":"body",
							"description":"Pet object that needs to be added to the store",
							"required":true,
							"type":"Pet",
							"paramType":"body",
							"allowMultiple":false
						}
					],
					"responseMessages":[
						{
							"code":405,
							"message":"Invalid input"
						}
					]
				},
				{
					"method":"PUT",
					"summary":"Update an existing pet",
					"notes":"",
					"type":"void",
					"nickname":"updatePet",
					"authorizations":{
						
					},
					"parameters":[
						{
							"name":"body",
							"description":"Pet object that needs to be added to the store",
							"required":true,
							"type":"Pet",
							"paramType":"body",
							"allowMultiple":false
						}
					],
					"responseMessages":[
						{
							"code":400,
							"message":"Invalid ID supplied"
						},
						{
							"code":404,
							"message":"Pet not found"
						},
						{
							"code":405,
							"message":"Validation exception"
						}
					]
				}
			]
		},
		{
			"path":"/pet/findByStatus",
			"operations":[
				{
					"method":"GET",
					"summary":"Finds Pets by status",
					"notes":"Multiple status values can be provided with comma seperated strings",
					"type":"array",
					"items":{
						"$ref":"Pet"
					},
					"nickname":"findPetsByStatus",
					"authorizations":{
						
					},
					"parameters":[
						{
							"name":"status",
							"description":"Status values that need to be considered for filter",
							"defaultValue":"available",
							"required":true,
							"type":"string",
							"paramType":"query",
							"allowMultiple":true,
							"enum":[
								"available",
								"pending",
								"sold"
							]
						}
					],
					"responseMessages":[
						{
							"code":400,
							"message":"Invalid status value"
						}
					]
				}
			]
		},
		{
			"path":"/pet/findByTags",
			"operations":[
				{
					"method":"GET",
					"summary":"Finds Pets by tags",
					"notes":"Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
					"type":"array",
					"items":{
						"$ref":"Pet"
					},
					"nickname":"findPetsByTags",
					"authorizations":{
						
					},
					"parameters":[
						{
							"name":"tags",
							"description":"Tags to filter by",
							"required":true,
							"type":"string",
							"paramType":"query",
							"allowMultiple":true
						}
					],
					"responseMessages":[
						{
							"code":400,
							"message":"Invalid tag value"
						}
					],
					"deprecated":"true"
				}
			]
		}
	],
	"models":{
		"Pet":{
			"id":"Pet",
			"properties":{
				"id":{
					"type":"integer",
					"format":"int64"
				},
				"category":{
					"$ref":"Category"
				},
				"name":{
					"type":"string"
				},
				"status":{
					"type":"string",
					"description":"pet status in the store",
					"enum":[
						"available",
						"pending",
						"sold"
					]
				},
				"photoUrl":{
					"type":"array",
					"items":{
						"type":"string"
					}
				},
				"tag":{
					"type":"array",
					"items":{
						"$ref":"Tag"
					}
				}
			}
		},
		"Tag":{
			"id":"Tag",
			"properties":{
				"id":{
					"type":"integer",
					"format":"int64"
				},
				"name":{
					"type":"string"
				}
			}
		},
		"Category":{
			"id":"Category",
			"properties":{
				"id":{
					"type":"integer",
					"format":"int64"
				},
				"name":{
					"type":"string"
				}
			}
		}
	}
}